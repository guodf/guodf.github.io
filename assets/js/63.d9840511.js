(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{411:function(n,t,p){"use strict";p.r(t);var v=p(1),e=Object(v.a)({},(function(){var n=this,t=n.$createElement,p=n._self._c||t;return p("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[p("h3",{attrs:{id:"安装python"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#安装python"}},[n._v("#")]),n._v(" 安装python")]),n._v(" "),p("p",[n._v("从下面地址选择对应你平台的python安装包：")]),n._v(" "),p("p",[n._v("https://www.python.org/downloads/")]),n._v(" "),p("p",[n._v("python给我们提供了多种平台、多个版本的安装包，以及多种安装方式：\n以windows的三种包为例：")]),n._v(" "),p("p",[n._v("​\t二进制包： "),p("code",[n._v("Windows x86-64 executable installer")]),n._v("，只需要下一步下一步就行了")]),n._v(" "),p("p",[n._v("​\t在线安装包： "),p("code",[n._v("Windows x86-64 web-based installer")]),n._v("，先下载然后再按二进制包方式安装")]),n._v(" "),p("p",[n._v("​\t便携安装包： "),p("code",[n._v("Windows x86-64 embeddable zip file")]),n._v("，直接解压到某个目录并将目录路径添加到环境变量")]),n._v(" "),p("h3",{attrs:{id:"包管理工具"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#包管理工具"}},[n._v("#")]),n._v(" 包管理工具")]),n._v(" "),p("p",[n._v("python有非常多的包管理工具，包管理工具是为了可以方便的管理项目包的依赖关系。")]),n._v(" "),p("p",[n._v("常用流行的有：easy_install、pip、pyenv、virtualenv、pipenv、conda等")]),n._v(" "),p("p",[p("strong",[n._v("easy_install")])]),n._v(" "),p("p",[n._v("比较早期的包管理工具，完全可以使用pip代替，可以不掌握其用法，简单了解一下就行了")]),n._v(" "),p("p",[p("strong",[n._v("pip")])]),n._v(" "),p("p",[n._v("easy_install的进化版本，官方安装包自带的管理工具。")]),n._v(" "),p("p",[n._v("假如现在有两个项目：")]),n._v(" "),p("p",[n._v("第一个项目：它依赖A包，用"),p("code",[n._v("pip install A")]),n._v("安装对包的依赖\n第二个项目：它依赖B包，用"),p("code",[n._v("pip install B")]),n._v("安装对包的依赖")]),n._v(" "),p("p",[n._v("当项目开发完成需要部署的时候，我们通常只会将包的源代码发布到运行环境，由于我们的项目依赖了第三方包，所以需要导出这些依赖，然后在运行环境上重新导入依赖，但因为我们是在一台电脑上开发的，就导致使用"),p("code",[n._v("pip freeze > requirements.txt")]),n._v("导出依赖包说明文件时把本地安装的所有包都导出了，那么在运行环境中使用"),p("code",[n._v("pip install -r requirements.txt")]),n._v("导入依赖时会导入不必要的依赖，这也是后面的virtualenv、pipenv、conda所要解决的问题。")]),n._v(" "),p("p",[p("strong",[n._v("pyenv")])]),n._v(" "),p("p",[n._v("这个工具用来管理多个python版本共存的问题，当你的电脑上安装了多个版本的python时，那个版本才是我们需要的默认版本，那么用pyenv就可以很方便的进行管理。")]),n._v(" "),p("p",[n._v("因为我的环境时windows，所以需要去： https://github.com/pyenv-win/pyenv-win#get-pyenv-win 这个地址查看如何安装pyenv，linux系统需要安装需要去： https://github.com/pyenv/pyenv 这里找教程。")]),n._v(" "),p("p",[p("font",{attrs:{color:"red"}},[n._v("如果有条件还是建议使用linux、macos系统开发python")])],1),n._v(" "),p("p",[n._v("如何使用请移步："),p("a",{attrs:{href:"https://github.com/pyenv-win/pyenv-win",target:"_blank",rel:"noopener noreferrer"}},[n._v("教程"),p("OutboundLink")],1)]),n._v(" "),p("p",[p("strong",[n._v("virtualenv")])]),n._v(" "),p("p",[n._v("这个工具主要解决多个python开发文件互不干扰的问题，也就是将你的python版本虚拟化出多个开发目录。")]),n._v(" "),p("p",[p("strong",[n._v("pipenv")])]),n._v(" "),p("p",[n._v("这个工具是pip+virtualenv的合集，目前来说小巧且强大的包管理工具了，官方推荐。")]),n._v(" "),p("p",[p("strong",[n._v("conda")])]),n._v(" "),p("p",[n._v("还没有接触过，目测同pipenv功能一样强大或者更强。")]),n._v(" "),p("p",[p("strong",[n._v("推荐组合")])]),n._v(" "),p("p",[n._v("流行的推荐组合pyenv+pipenv，pyenv搞定多个python工程，pipenv解决虚拟环境与包的管理。")]),n._v(" "),p("h3",{attrs:{id:"配置pip国内源加速访问"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#配置pip国内源加速访问"}},[n._v("#")]),n._v(" 配置pip国内源加速访问")]),n._v(" "),p("div",{staticClass:"language-bash line-numbers-mode"},[p("pre",{pre:!0,attrs:{class:"language-bash"}},[p("code",[n._v("pip config "),p("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v("set")]),n._v(" global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n"),p("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#C:\\Users\\xxx\\AppData\\Roaming\\pip\\pip.ini")]),n._v("\n")])]),n._v(" "),p("div",{staticClass:"line-numbers-wrapper"},[p("span",{staticClass:"line-number"},[n._v("1")]),p("br"),p("span",{staticClass:"line-number"},[n._v("2")]),p("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);