(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{474:function(t,a,s){"use strict";s.r(a);var e=s(1),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"最佳归并树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最佳归并树"}},[t._v("#")]),t._v(" 最佳归并树")]),t._v(" "),s("p",[t._v("###　概念")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("通过以构建赫夫曼树的方式构建归并树，使其对读写外存的次数降至最低（k-路平衡归并，\n需要选取合适的 k 值，构建赫夫曼树作为归并树），所以称此归并树为最佳归并树。\n")])])]),s("h3",{attrs:{id:"原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),s("ol",[s("li",[t._v("首选使用"),s("RouterLink",{attrs:{to:"/数据结构/置换选择排序.html"}},[t._v("置换选择排序")]),t._v("中的归并算法，将集合分为多个归并段")],1),t._v(" "),s("li",[t._v("根据每个归并段的长度构建一颗"),s("RouterLink",{attrs:{to:"/数据结构/赫夫曼树.html"}},[t._v("n叉赫夫曼树")])],1),t._v(" "),s("li",[t._v("然后按照n叉赫夫曼树结构进行胜/败树算法排序")])])])}),[],!1,null,null,null);a.default=r.exports}}]);