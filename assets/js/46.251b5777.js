(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{294:function(t,p,n){"use strict";n.r(p);var v=n(1),e=Object(v.a)({},(function(){var t=this,p=t.$createElement,n=t._self._c||p;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"安装python"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装python"}},[t._v("#")]),t._v(" 安装python")]),t._v(" "),n("p",[t._v("从下面地址选择对应你平台的python安装包：")]),t._v(" "),n("p",[t._v("https://www.python.org/downloads/")]),t._v(" "),n("p",[t._v("python给我们提供了多种平台、多个版本的安装包，以及多种安装方式：\n以windows的三种包为例：")]),t._v(" "),n("p",[t._v("​\t二进制包： "),n("code",[t._v("Windows x86-64 executable installer")]),t._v("，只需要下一步下一步就行了")]),t._v(" "),n("p",[t._v("​\t在线安装包： "),n("code",[t._v("Windows x86-64 web-based installer")]),t._v("，先下载然后再按二进制包方式安装")]),t._v(" "),n("p",[t._v("​\t便携安装包： "),n("code",[t._v("Windows x86-64 embeddable zip file")]),t._v("，直接解压到某个目录并将目录路径添加到环境变量")]),t._v(" "),n("h3",{attrs:{id:"包管理工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#包管理工具"}},[t._v("#")]),t._v(" 包管理工具")]),t._v(" "),n("p",[t._v("python有非常多的包管理工具，包管理工具是为了可以方便的管理项目包的依赖关系。")]),t._v(" "),n("p",[t._v("常用流行的有：easy_install、pip、pyenv、virtualenv、pipenv、conda等")]),t._v(" "),n("p",[n("strong",[t._v("easy_install")])]),t._v(" "),n("p",[t._v("比较早期的包管理工具，完全可以使用pip代替，可以不掌握其用法，简单了解一下就行了")]),t._v(" "),n("p",[n("strong",[t._v("pip")])]),t._v(" "),n("p",[t._v("easy_install的进化版本，官方安装包自带的管理工具。")]),t._v(" "),n("p",[t._v("假如现在有两个项目：")]),t._v(" "),n("p",[t._v("第一个项目：它依赖A包，用"),n("code",[t._v("pip install A")]),t._v("安装对包的依赖\n第二个项目：它依赖B包，用"),n("code",[t._v("pip install B")]),t._v("安装对包的依赖")]),t._v(" "),n("p",[t._v("当项目开发完成需要部署的时候，我们通常只会将包的源代码发布到运行环境，由于我们的项目依赖了第三方包，所以需要导出这些依赖，然后在运行环境上重新导入依赖，但因为我们是在一台电脑上开发的，就导致使用"),n("code",[t._v("pip freeze > requirements.txt")]),t._v("导出依赖包说明文件时把本地安装的所有包都导出了，那么在运行环境中使用"),n("code",[t._v("pip install -r requirements.txt")]),t._v("导入依赖时会导入不必要的依赖，这也是后面的virtualenv、pipenv、conda所要解决的问题。")]),t._v(" "),n("p",[n("strong",[t._v("pyenv")])]),t._v(" "),n("p",[t._v("这个工具用来管理多个python版本共存的问题，当你的电脑上安装了多个版本的python时，那个版本才是我们需要的默认版本，那么用pyenv就可以很方便的进行管理。")]),t._v(" "),n("p",[t._v("因为我的环境时windows，所以需要去： https://github.com/pyenv-win/pyenv-win#get-pyenv-win 这个地址查看如何安装pyenv，linux系统需要安装需要去： https://github.com/pyenv/pyenv 这里找教程。")]),t._v(" "),n("p",[n("font",{attrs:{color:"red"}},[t._v("如果有条件还是建议使用linux、macos系统开发python")])],1),t._v(" "),n("p",[t._v("如何使用请移步："),n("a",{attrs:{href:"https://github.com/pyenv-win/pyenv-win",target:"_blank",rel:"noopener noreferrer"}},[t._v("教程"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("strong",[t._v("virtualenv")])]),t._v(" "),n("p",[t._v("这个工具主要解决多个python开发文件互不干扰的问题，也就是将你的python版本虚拟化出多个开发目录。")]),t._v(" "),n("p",[n("strong",[t._v("pipenv")])]),t._v(" "),n("p",[t._v("这个工具是pip+virtualenv的合集，目前来说小巧且强大的包管理工具了，官方推荐。")]),t._v(" "),n("p",[n("strong",[t._v("conda")])]),t._v(" "),n("p",[t._v("还没有接触过，目测同pipenv功能一样强大或者更强。")]),t._v(" "),n("p",[n("strong",[t._v("推荐组合")])]),t._v(" "),n("p",[t._v("流行的推荐组合pyenv+pipenv，pyenv搞定多个python工程，pipenv解决虚拟环境与包的管理。")]),t._v(" "),n("h3",{attrs:{id:"配置pip国内源加速访问"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置pip国内源加速访问"}},[t._v("#")]),t._v(" 配置pip国内源加速访问")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("pip config "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#C:\\Users\\xxx\\AppData\\Roaming\\pip\\pip.ini")]),t._v("\n")])])])])}),[],!1,null,null,null);p.default=e.exports}}]);