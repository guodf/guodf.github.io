(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{270:function(t,r,e){"use strict";e.r(r);var a=e(1),n=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"最佳归并树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最佳归并树","aria-hidden":"true"}},[t._v("#")]),t._v(" 最佳归并树")]),t._v(" "),e("p",[t._v("###　概念")]),t._v(" "),e("pre",[e("code",[t._v("通过以构建赫夫曼树的方式构建归并树，使其对读写外存的次数降至最低（k-路平衡归并，\n需要选取合适的 k 值，构建赫夫曼树作为归并树），所以称此归并树为最佳归并树。\n")])]),t._v(" "),e("h3",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),e("ol",[e("li",[t._v("首选使用"),e("router-link",{attrs:{to:"/数据结构/置换选择排序.html"}},[t._v("置换选择排序")]),t._v("中的归并算法，将集合分为多个归并段")],1),t._v(" "),e("li",[t._v("根据每个归并段的长度构建一颗"),e("router-link",{attrs:{to:"/数据结构/赫夫曼树.html"}},[t._v("n叉赫夫曼树")])],1),t._v(" "),e("li",[t._v("然后按照n叉赫夫曼树结构进行胜/败树算法排序")])])])}),[],!1,null,null,null);r.default=n.exports}}]);